seq.tests = do
  !list.tests
  !list.matching.tests

list.tests = do
  check "List.empty builder" do
    _ = []
    true
  check "List builder" do
    _ = [1, 2, 3]
    true
  checkEqual "List.cons" (1 +: (2 +: (3 +: []))) [1, 2, 3]
  checkEqual "List.snoc" ([] :+ 1 :+ 2 :+ 3) [1, 2, 3]
  checkEqual "List.++" ([] ++ [1, 2] ++ [3, 4] ++ []) [1, 2, 3, 4]
  checkEqual "List.take (1)" (List.take 0 [1,2,3]) []
  checkEqual "List.take (2)" (List.take 2 [1,2,3]) [1,2]
  checkEqual "List.take (3)" (List.take 3 [1,2,3]) [1,2,3]
  checkEqual "List.take (4)" (List.take 100 [1,2,3]) [1,2,3]
  checkEqual "List.take (5)" (List.take 3 []) []
  checkEqual "List.drop (1)" (List.drop 0 [1,2,3]) [1,2,3]
  checkEqual "List.drop (2)" (List.drop 2 [1,2,3]) [3]
  checkEqual "List.drop (3)" (List.drop 3 [1,2,3]) []
  checkEqual "List.drop (4)" (List.drop 100 [1,2,3]) []
  checkEqual "List.drop (5)" (List.drop 3 []) []
  checkEqual "List.size (1)" (List.size []) 0
  checkEqual "List.size (2)" (List.size [1,2,3]) 3
  checkEqual "List.at (1)" (List.at 0 [1,2,3]) (Some 1)
  checkEqual "List.at (2)" (List.at 2 [1,2,3]) (Some 3)
  checkEqual "List.at (3)" (List.at 1 []) None
  checkEqual "List.at (4)" (List.at 5 [1,2,3]) None

list.matching.tests = do
  use Optional Some None

  lenLit = cases
    [] -> 0
    [_] -> 1
    [_, _] -> 2
    [_, _, _] -> 3

  checkEqual "length matching: literal" (lenLit [1, 2, 3]) 3

  lenCons = cases
    [] -> 0
    _ +: t -> 1 + lenCons t
    _ +: (_ +: t) -> 2 + lenCons t

  checkEqual "length: cons matching" (lenCons [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 15

  lenSnoc = cases
    [] -> 0
    t :+ _ -> 1 + lenSnoc t

  checkEqual "length: snoc matching" (lenSnoc [1, 2, 3, 4, 5, 6, 7, 8]) 8

  lenConcat1 = cases
    [] -> 0
    [_] ++ tail -> 1 + lenConcat1 tail

  checkEqual "length: ++ prefix matching" (lenConcat1 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) 11

  lenConcat2 = cases
    [] -> 0
    prefix ++ [_] -> 1 + lenConcat2 prefix

  checkEqual "length: ++ suffix matching" (lenConcat2 [1, 2, 3, 4, 5]) 5

  head = cases
    h +: _ -> Some h
    _ -> None

  checkEqual "cons matching: empty" (head []) None
  checkEqual "cons matching: non empty" (head [1, 2, 3]) (Some 1)

  firstTwo = cases
    x +: (y +: _) -> Some (x, y)
    _ -> None

  checkEqual "two cons matching (1)" (firstTwo []) None
  checkEqual "two cons matching (2)" (firstTwo [1]) None
  checkEqual "two cons matching (3)" (firstTwo [1, 2, 3]) (Some (1, 2))

  lastTwo = cases
    _ :+ x :+ y -> Some (x, y)
    _ -> None

  checkEqual "two snoc matching (1)" (lastTwo []) None
  checkEqual "two snoc matching (2)" (lastTwo [1]) None
  checkEqual "two snoc matching (3)" (lastTwo [1, 2, 3]) (Some (2, 3))

  middle = cases
    [_] ++ m ++ [_] -> Some m
    _ -> None

  checkEqual "middle matching (1)" (middle []) None
  checkEqual "middle matching (2)" (middle [1, 2]) (Some [])
  checkEqual "middle matching (3)" (middle [1, 2, 3, 4, 5, 6]) (Some [2, 3, 4, 5])

  middleNel = cases
    [_] ++ (h +: t) ++ [_] -> Some (h, t)
    _ -> None

  checkEqual "middle matching with non-empty list (1)" (middleNel []) None
  checkEqual "middle matching with non-empty list (2)" (middleNel [1, 2]) None
  checkEqual "middle matching with non-empty list (3)" (middleNel [1, 2, 3, 4, 5, 6]) (Some (2, [3, 4, 5]))

  splitAtFour l = match l with
    [a] ++ x@(b +: (c +: y@([] :+ d))) ++ tail -> ([a, b, c, d], tail)
    _ -> (l, [])

  --  checkEqual "Complex matching" (splitAtFour [1, 2, 3, 4, 5, 6, 7]) ([1, 2, 3, 4], [5, 6, 7])
  ()
